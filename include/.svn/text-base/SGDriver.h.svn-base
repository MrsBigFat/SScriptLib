/************************************************************************
* Copyright (c) 2009,芯通科技有限公司
* All rights reserved.
* 文件名称：SGDriver.h
* 文件标识：reserved
* 摘要：SGDriver.dll的外部接口文件
*
************************************************************************/

// The following ifdef block is the standard way of creating macros whiCh make exporting 
// from a DLL simpler. All files within this DLL are compiled with the SGDRIVER_EXPORTS
// symbol defined on the command line. this symbol should not be defined on any project
// that uses this DLL. This way any other project whose source files include this file see 
// SGDRIVER_API functions as being imported from a DLL, wheras this DLL sees symbols
// defined with this macro as being exported.
#ifdef SGDRIVER_EXPORTS
#define SGDRIVER_API __declspec(dllexport)
#else
#define SGDRIVER_API __declspec(dllimport)
#endif

/************************************************************************
* 版本：2.0.1.0
* 作者：dolby.jiang
* 完成日期：2009年9月24日
* 更改：文件建立
*
************************************************************************/

/************************************************************************
* 版本：2.0.1.1
* 作者：dolby.jiang
* 完成日期：2009年11月23日
* 更改：修改打开函数
*
************************************************************************/


/************************************************************************
* 版本：3.0.0.0
* 作者：dolby.jiang
* 完成日期：2010年5月13日
* 更改：修改句柄计算方法
*
************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif
	
	//打开并初始化设备
	SGDRIVER_API short int	_stdcall	SG_OpenDev(char *ConnectStr, short int *Handle);

	//关闭设备
	SGDRIVER_API short int	_stdcall	SG_CloseDev(short int Handle);

	//仪器复位
	SGDRIVER_API short int	_stdcall	SG_Reset(short int Handle);

	//加载信号波形文件
	SGDRIVER_API short int	_stdcall	SG_SetWaveFile(short int Handle, char *WaveName);

	//设置波形文件的状态
	SGDRIVER_API short int	_stdcall	SG_SetArbWaveState(short int Handle, unsigned short State);

	//设置中心频率
	SGDRIVER_API short int	_stdcall	SG_SetRFFreq(short int Handle, double Freq);

	//设置幅度值
	SGDRIVER_API short int	_stdcall	SG_SetRFAmplitu(short int Handle, double Level);

	//获取幅度值
	SGDRIVER_API short int	_stdcall	SG_GetRFAmplitu(short int Handle, double *Level);

	//设置幅度偏移值
	SGDRIVER_API short int	_stdcall	SG_SetRFAmplituOffset(short int Handle, double Level);

	//设置信号解调状态(0:off 1:on)
	SGDRIVER_API short int	_stdcall	SG_SetIQModulationState(short int Handle, unsigned short State);
	
	//设置信号源信号输出状态(0:off 1:on)
	SGDRIVER_API short int	_stdcall	SG_SetRFPowerOnState(short int Handle, unsigned short State);

	//设置扫描点数
	SGDRIVER_API short int	_stdcall	SG_SetSweepPoint(short int Handle, unsigned long Point);

	//设置扫描触发模式 
	SGDRIVER_API short int	_stdcall	SG_SetSweepTriMode(short int Handle, unsigned short TrigMode);

	//设置信号源扫描始止频率
	SGDRIVER_API short int	_stdcall	SG_SetStartandStopFreq(short int Handle, double StartFreq, double StopFreq);

	//设置信号源扫描模式
	SGDRIVER_API short int	_stdcall	SG_SetSweepMode(short int Handle,  unsigned short Mode);

	//设置信号源Mark模式 0:Unchanged 1:Restart 2:pulse 3:pattern 4:on/off Ratio
	SGDRIVER_API short int	_stdcall	SG_SetARBMarkMode(short int Handle, short Channel, unsigned short Mode);
	
	//设置信号源频率偏移量（单位:MHz）
	SGDRIVER_API short int	_stdcall	SG_SetFreqOffset(short int Handle, double FreqOffset);
	
	//设置信号源Mark延迟时间
	SGDRIVER_API short int	_stdcall	SG_SetARBMarkDelay(short int Handle, short Channel, double DelayTime);

	//设置信号源连续触发类型 0:FREE 1:TRIGger 2:RESet
	SGDRIVER_API short int	_stdcall	SG_SetTrigInContinuousType(short int Handle, unsigned short Type);

	//设置信号源触发源类型 0:KEY 1:EXT 2:BUS
	SGDRIVER_API short int	_stdcall	SG_SetTrigInSourceType(short int Handle, unsigned short Type);

	//设置信号源触发极性 0:POSitive 1:NEGative
	SGDRIVER_API short int	_stdcall	SG_SetTrigInPolarity(short int Handle, unsigned short Polarity);

	//设置信号源触发延迟时间(单位:ms)
	SGDRIVER_API short int	_stdcall	SG_SetTrigInDelay(short int Handle, double DelayTime);

	//设置信号源Marker ALC Hold值 0:NONE 1:M1 2:M2 3:M3 4:M4
	SGDRIVER_API short int	_stdcall	SG_SetMarkerALCHold(short int Handle, unsigned short Marker);

	//设置信号源电平 ALC状态 0:Off 1:On 
	SGDRIVER_API short int	_stdcall	SG_SetAmpALCMode(short int Handle, unsigned short Mode);

	//设置时钟频率(单位:MHz)
	SGDRIVER_API short int	_stdcall	SG_SetClockFreq(short int Handle, double Freq);

	//设置功率检测方式(0:Normal 1:Minimum)
	SGDRIVER_API short int	_stdcall	SG_SetRFPowerSearchMode(short int Handle, short Mode);

	//获取设备型号信息
	SGDRIVER_API	short int _stdcall	SG_GetIDN(short int Handle, char *IDN);
	
	//发送指令
	SGDRIVER_API	short int _stdcall	SG_SendCmd(short int Handle, char *Command);
	
	//获取返回指令值
	SGDRIVER_API	short int _stdcall	SG_GetCmd(short int Handle, char *Command, char *RetStr);
		
#ifdef __cplusplus
}
#endif


